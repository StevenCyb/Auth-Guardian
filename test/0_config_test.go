package test

import (
	"auth-guardian/config"
	"fmt"
	"os"
	"testing"
)

func checkConfigValues(t *testing.T) {
	setDefaultConfig()

	err := config.Load()
	notError(t, err)

	assertEqual(t, config.LogLevel, 1)
	assertEqual(t, config.LogJSON, true)
	assertEqual(t, config.LogFile, "/tmp/log.txt")
	assertEqual(t, config.MockLDAP, true)
	assertEqual(t, config.MockOAuth, true)
	assertEqual(t, config.MockSAML, true)
	assertEqual(t, config.MockTestService, true)
	assertEqual(t, config.Listen, ":2021")
	assertEqual(t, config.ServerCrt, "server.crt")
	assertEqual(t, config.ServerKey, "server.key")
	assertEqual(t, config.Upstream, "localhost:3333")
	assertEqual(t, config.CORSUpstream, true)
	assertEqual(t, config.ForwardUserinfo, true)
	assertEqual(t, config.ForwardAccessToken, true)
	assertEqual(t, config.SessionLifetime, 2)
	assertEqual(t, config.ClientID, "aaa")
	assertEqual(t, config.ClientSecret, "bbb")
	assertEqual(t, fmt.Sprintf("%+v", config.Scopes), fmt.Sprintf("%+v", []string{"aaa", "bbb"}))
	assertEqual(t, config.RedirectURL, "aaa")
	assertEqual(t, config.AuthURL, "bbb")
	assertEqual(t, config.TokenURL, "ccc")
	assertEqual(t, config.UserinfoURL, "ddd")
	assertEqual(t, config.StateLifetime, 3)
	assertEqual(t, config.IdpMetadataURL, "aaa")
	assertEqual(t, config.IdpRegisterURL, "bbb")
	assertEqual(t, config.SelfRootURL, "ccc")
	assertEqual(t, config.SAMLCrt, "ddd")
	assertEqual(t, config.SAMLKey, "eee")
	assertEqual(t, config.DirectoryServerBaseDN, "fff")
	assertEqual(t, config.DirectoryServerBindDN, "ggg")
	assertEqual(t, config.DirectoryServerPort, 4)
	assertEqual(t, config.DirectoryServerHost, "hhh")
	assertEqual(t, config.DirectoryServerBindPassword, "iii")
	assertEqual(t, config.DirectoryServerFilter, "jjj")
	assertEqual(t, fmt.Sprintf("%+v", config.Rules), fmt.Sprintf("%+v", []config.RuleConfig{{Type: "whitelist", Path: "/*", Method: []string{"POST", "GET"}}}))
}

func TestConfigFromArguments(t *testing.T) {
	defer seq()()

	argsBack := os.Args
	defer func() { os.Args = argsBack }()

	os.Args = append(os.Args, "--log-level=1")
	os.Args = append(os.Args, "--log-json=true")
	os.Args = append(os.Args, "--log-file=/tmp/log.txt")
	os.Args = append(os.Args, "--mock-ldap=true")
	os.Args = append(os.Args, "--mock-oauth=true")
	os.Args = append(os.Args, "--mock-saml=true")
	os.Args = append(os.Args, "--mock-test-service=true")
	os.Args = append(os.Args, "--listen=:2021")
	os.Args = append(os.Args, "--server-crt=server.crt")
	os.Args = append(os.Args, "--server-key=server.key")
	os.Args = append(os.Args, "--upstream=localhost:3333")
	os.Args = append(os.Args, "--upstream-cors=true")
	os.Args = append(os.Args, "--forward-userinfo=true")
	os.Args = append(os.Args, "--forward-access-token=true")
	os.Args = append(os.Args, "--session-lifetime=2")
	os.Args = append(os.Args, "--client-id=aaa")
	os.Args = append(os.Args, "--client-secret=bbb")
	os.Args = append(os.Args, "--scopes=aaa,bbb")
	os.Args = append(os.Args, "--redirect-url=aaa")
	os.Args = append(os.Args, "--auth-url=bbb")
	os.Args = append(os.Args, "--token-url=ccc")
	os.Args = append(os.Args, "--userinfo-url=ddd")
	os.Args = append(os.Args, "--state-lifetime=3")
	os.Args = append(os.Args, "--saml-metadata-url=aaa")
	os.Args = append(os.Args, "--saml-register-url=bbb")
	os.Args = append(os.Args, "--self-root-url=ccc")
	os.Args = append(os.Args, "--saml-crt=ddd")
	os.Args = append(os.Args, "--saml-key=eee")
	os.Args = append(os.Args, "--ds-base-dn=fff")
	os.Args = append(os.Args, "--ds-bind-dn=ggg")
	os.Args = append(os.Args, "--ds-port=4")
	os.Args = append(os.Args, "--ds-host=hhh")
	os.Args = append(os.Args, "--ds-bind-password=iii")
	os.Args = append(os.Args, "--ds-filter=jjj")
	os.Args = append(os.Args, `--rules={"type":"whitelist","method":["POST","GET"],"path":"/*"}`)

	checkConfigValues(t)
}

func TestConfigFromFile(t *testing.T) {
	defer seq()()

	err := os.Rename("tmp_config.yml", "config.yml")
	notError(t, err)
	defer func() {
		err := os.Rename("config.yml", "tmp_config.yml")
		notError(t, err)
	}()

	checkConfigValues(t)
}

func TestConfigFromEnvironment(t *testing.T) {
	defer seq()()

	os.Setenv("log-level", "1")
	os.Setenv("log-json", "true")
	os.Setenv("log-file", "/tmp/log.txt")
	os.Setenv("mock-ldap", "true")
	os.Setenv("mock-oauth", "true")
	os.Setenv("mock-saml", "true")
	os.Setenv("mock-test-service", "true")
	os.Setenv("listen", ":2021")
	os.Setenv("server-crt", "server.crt")
	os.Setenv("server-key", "server.key")
	os.Setenv("upstream", "localhost:3333")
	os.Setenv("upstream-cors", "true")
	os.Setenv("forward-userinfo", "true")
	os.Setenv("forward-access-token", "true")
	os.Setenv("session-lifetime", "2")
	os.Setenv("client-id", "aaa")
	os.Setenv("client-secret", "bbb")
	os.Setenv("scopes", "aaa,bbb")
	os.Setenv("redirect-url", "aaa")
	os.Setenv("auth-url", "bbb")
	os.Setenv("token-url", "ccc")
	os.Setenv("userinfo-url", "ddd")
	os.Setenv("state-lifetime", "3")
	os.Setenv("saml-metadata-url", "aaa")
	os.Setenv("saml-register-url", "bbb")
	os.Setenv("self-root-url", "ccc")
	os.Setenv("saml-crt", "ddd")
	os.Setenv("saml-key", "eee")
	os.Setenv("ds-base-dn", "fff")
	os.Setenv("ds-bind-dn", "ggg")
	os.Setenv("ds-port", "4")
	os.Setenv("ds-host", "hhh")
	os.Setenv("ds-bind-password", "iii")
	os.Setenv("ds-filter", "jjj")
	os.Setenv("rules", `[{"type": "whitelist", "method": ["POST","GET"], "path": "/*"}]`)
	defer func() {
		os.Unsetenv("log-level")
		os.Unsetenv("log-json")
		os.Unsetenv("log-file")
		os.Unsetenv("mock-ldap")
		os.Unsetenv("mock-oauth")
		os.Unsetenv("mock-saml")
		os.Unsetenv("mock-test-service")
		os.Unsetenv("listen")
		os.Unsetenv("server-crt")
		os.Unsetenv("server-key")
		os.Unsetenv("upstream")
		os.Unsetenv("upstream-cors")
		os.Unsetenv("forward-userinfo")
		os.Unsetenv("forward-access-token")
		os.Unsetenv("session-lifetime")
		os.Unsetenv("client-id")
		os.Unsetenv("client-secret")
		os.Unsetenv("scopes")
		os.Unsetenv("redirect-url")
		os.Unsetenv("auth-url")
		os.Unsetenv("token-url")
		os.Unsetenv("userinfo-url")
		os.Unsetenv("state-lifetime")
		os.Unsetenv("saml-metadata-url")
		os.Unsetenv("saml-register-url")
		os.Unsetenv("self-root-url")
		os.Unsetenv("saml-crt")
		os.Unsetenv("saml-key")
		os.Unsetenv("ds-base-dn")
		os.Unsetenv("ds-bind-dn")
		os.Unsetenv("ds-port")
		os.Unsetenv("ds-host")
		os.Unsetenv("ds-bind-password")
		os.Unsetenv("ds-filter")
		os.Unsetenv("rules")
	}()

	checkConfigValues(t)
}
